"""
@author Jack Ringer
Date: 5/13/2025
Description:
NATA = "Number of Assays Tested Analysis"
The purpose of this workflow is to compute scaffold pScores only using compounds which were
tested in a sufficient number of assays. 
The motivation behind restricting compounds based on nass_tested is that if a compound is only
tested in a small N. of assays, there is a very low-likelihood of it showing up as active, and thus
including infrequently tested compounds biases the ncpd_tested and ncpd_active stats (particularly the ratio between them).
In future versions of Badapple (Badapple 3+ ?) we should reconsider our definition of nsub_tested (similar to ncpd_tested)
and nsub_active ("" ncpd_active) to avoid these issues.
Note 1: This workflow assumes the database has been constructed up to the annotate_scaffold_stats rule in `Snakefile`.
Note 2: This workflow will create several additional scaffold tables with scaffold ids and compute stats + pScores
Note 3: If running from start->finish this workflow can take several hours!
"""

import os
from snakemake.utils import min_version

min_version("6.0")


configfile: "config_NATA.yaml"


NAT_VALS = list(int(x) for x in config["NASS_TESTED_MIN_VALUES"].keys())

# define job files (all these jobs are updating a Postgres DB)
ANNOTATE_COMPOUNDS_JOB_FILE = (
    "logs/annotate_compound_stats/job_done.txt"  # generated by Snakefile
)

CREATE_ALT_SCAFFOLD_TABLE_JOB_FILE = (
    "logs/NATA/create_alt_scaffold_table/done_{NASS_TESTED_MIN}.txt"
)
ANNOTATE_SCAFFOLDS_JOB_FILE = (
    "logs/NATA/annotate_alt_scaffold_stats/done_{NASS_TESTED_MIN}.txt"
)
INDEX_ALT_SCAFFOLD_TABLE_JOB_FILE = (
    "logs/NATA/index_alt_scaffold_table/done_{NASS_TESTED_MIN}.txt"
)
ANNOTATE_SCORES_JOB_FILE = "logs/NATA/annotate_scores/done_{NASS_TESTED_MIN}.txt"
FIGURES_DIR = os.path.join(config["OUTPUT_DIR"], "NAT{NASS_TESTED_MIN}")
EXPORT_TABLE_TSV_FILE = os.path.join(
    config["OUTPUT_DIR"], "scaffold_nat{NASS_TESTED_MIN}.tsv"
)

# for running some scripts in src/sql need path to the code repo
REPO_DIR = os.path.dirname(os.getcwd())


rule all:
    input:
        expand(FIGURES_DIR, NASS_TESTED_MIN=NAT_VALS),
        expand(EXPORT_TABLE_TSV_FILE, NASS_TESTED_MIN=NAT_VALS),


# currently this assumes the given user has admin privileges
rule create_alt_scaffold_table:
    input:
        ANNOTATE_COMPOUNDS_JOB_FILE,
    output:
        touch(CREATE_ALT_SCAFFOLD_TABLE_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        alt_table=lambda w: f"scaffold_NAT{w.NASS_TESTED_MIN}",
    log:
        "logs/NATA/create_alt_scaffold_table/nat_{NASS_TESTED_MIN}.log",
    benchmark:
        "benchmark/NATA/create_alt_scaffold_table/nat_{NASS_TESTED_MIN}.tsv"
    shell:
        """
        psql -d {params.db_name} -c "CREATE TABLE IF NOT EXISTS {params.alt_table} AS SELECT * FROM SCAFFOLD;" 
        psql -d {params.db_name} -c "UPDATE {params.alt_table} SET (ncpd_total, ncpd_tested, ncpd_active)  = (NULL, NULL, NULL);" 
        psql -d {params.db_name} -c "UPDATE {params.alt_table} SET (nsub_total, nsub_tested, nsub_active)  = (NULL, NULL, NULL);" 
        psql -d {params.db_name} -c "UPDATE {params.alt_table} SET (nass_tested, nass_active)  = (NULL, NULL);" 
        psql -d {params.db_name} -c "UPDATE {params.alt_table} SET (nsam_tested, nsam_active)  = (NULL, NULL);" 
        psql -d {params.db_name} -c "UPDATE {params.alt_table} SET pScore  = NULL;" 
        > {log} 2>&1
        """


rule index_alt_scaffold_table:
    input:
        CREATE_ALT_SCAFFOLD_TABLE_JOB_FILE,
    output:
        touch(INDEX_ALT_SCAFFOLD_TABLE_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        alt_table=lambda w: f"scaffold_NAT{w.NASS_TESTED_MIN}",
    log:
        "logs/NATA/index_alt_scaffold_table/nat_{NASS_TESTED_MIN}.log",
    benchmark:
        "benchmark/NATA/index_alt_scaffold_table/nat_{NASS_TESTED_MIN}.tsv"
    shell:
        """
        psql -d {params.db_name} -c "CREATE INDEX {params.alt_table}_scafid_idx ON {params.alt_table} (id);" 
        psql -d {params.db_name} -c "CREATE INDEX {params.alt_table}_smi_idx on {params.alt_table} (scafsmi);" 
        > {log} 2>&1
        """


rule annotate_alt_scaffold_stats:
    input:
        INDEX_ALT_SCAFFOLD_TABLE_JOB_FILE,
    output:
        touch(ANNOTATE_SCAFFOLDS_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        db_user=config["DB_USER"],
        db_password=config["DB_PASSWORD"],
        assay_id_tag="aid",
        scaffold_table=lambda w: f"scaffold_NAT{w.NASS_TESTED_MIN}",
        nass_tested_min=lambda w: w.NASS_TESTED_MIN,
    log:
        "logs/NATA/annotate_alt_scaffold_stats/nat_{NASS_TESTED_MIN}.log",
    benchmark:
        "benchmark/NATA/annotate_alt_scaffold_stats/nat_{NASS_TESTED_MIN}.tsv"
    shell:
        "python ../src/annotate_db_assaystats.py "
        "--annotate_scaffolds "
        "--assay_id_tag '{params.assay_id_tag}' "
        "--host '{params.db_host}' "
        "--dbname '{params.db_name}' "
        "--schema '{params.db_schema}' "
        "--activity '{params.db_schema}' "
        "--user '{params.db_user}' "
        "--password '{params.db_password}' "
        "--nass_tested_min {params.nass_tested_min} "
        "--scaffold_table '{params.scaffold_table}' "
        "--v "
        "> {log} 2>&1"


# annotate scaffold scores
rule annotate_alt_scores:
    input:
        ANNOTATE_SCAFFOLDS_JOB_FILE,
    output:
        touch(ANNOTATE_SCORES_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        db_user=config["DB_USER"],
        db_password=config["DB_PASSWORD"],
        assay_id_tag="aid",
        badapple_version=config["BA_VERSION"],
        scaffold_table=lambda w: f"scaffold_NAT{w.NASS_TESTED_MIN}",
    log:
        "logs/NATA/annotate_scores/nat_{NASS_TESTED_MIN}.log",
    benchmark:
        "benchmark/NATA/annotate_scores/nat_{NASS_TESTED_MIN}.tsv"
    shell:
        "python ../src/annotate_db_scores.py "
        "--dbname '{params.db_name}' "
        "--badapple_version {params.badapple_version} "
        "--dbschema '{params.db_schema}' "
        "--host '{params.db_host}' "
        "--user '{params.db_user}' "
        "--password '{params.db_password}' "
        "--v "
        "--scaffold_table '{params.scaffold_table}' "
        "> {log} 2>&1"


# create figures
rule create_figures:
    input:
        ANNOTATE_SCORES_JOB_FILE,
    output:
        save_dir=directory(FIGURES_DIR),
    params:
        original_db_name=config["PREV_DB_NAME"],
        original_db_host=config["PREV_DB_HOST"],
        original_db_user=config["PREV_DB_USER"],
        original_db_password=config["PREV_DB_PASSWORD"],
        original_db_port=config["PREV_DB_PORT"],
        original_scaffold_table="scaffold",
        comparison_db_name=config["DB_NAME"],
        comparison_db_host=config["DB_HOST"],
        comparison_db_user=config["DB_USER"],
        comparison_db_password=config["DB_PASSWORD"],
        comparison_db_port=config["DB_PORT"],
        comparison_scaffold_table=lambda w: f"scaffold_NAT{w.NASS_TESTED_MIN}",
    log:
        "logs/NATA/create_figures/nat_{NASS_TESTED_MIN}.log",
    benchmark:
        "benchmark/NATA/create_figures/nat_{NASS_TESTED_MIN}.tsv"
    shell:
        "python ../src/plot_db_comparison.py "
        "--save_dir '{output.save_dir}' "
        "--original_db_name '{params.original_db_name}' "
        "--original_db_host '{params.original_db_host}' "
        "--original_db_user '{params.original_db_user}' "
        "--original_db_password '{params.original_db_password}' "
        "--original_db_port '{params.original_db_port}' "
        "--original_scaffold_table '{params.original_scaffold_table}' "
        "--comparison_db_name '{params.comparison_db_name}' "
        "--comparison_db_host '{params.comparison_db_host}' "
        "--comparison_db_user '{params.comparison_db_user}' "
        "--comparison_db_password '{params.comparison_db_password}' "
        "--comparison_db_port '{params.comparison_db_port}' "
        "--comparison_scaffold_table '{params.comparison_scaffold_table}' "
        "> {log} 2>&1"


# note: assuming .pgpass is setup for this part to avoid prompt for password
rule export_alt_scores_table:
    input:
        ANNOTATE_SCORES_JOB_FILE,
    output:
        export_table_tsv_file=EXPORT_TABLE_TSV_FILE,
    params:
        db_name=config["DB_NAME"],
        db_user=config["DB_USER"],
        scaffold_table=lambda w: f"scaffold_NAT{w.NASS_TESTED_MIN}",
    log:
        "logs/NATA/export_alt_scores_table/nat_{NASS_TESTED_MIN}.log",
    benchmark:
        "benchmark/NATA/export_alt_scores_table/nat_{NASS_TESTED_MIN}.tsv"
    shell:
        """
        psql -d {params.db_name} -U {params.db_user} \
        -c "\copy (SELECT * FROM {params.scaffold_table} ORDER BY id) TO STDOUT WITH (FORMAT CSV, HEADER, DELIMITER E'\t');" \
        > {output.export_table_tsv_file}
        """
