"""
@author Jack Ringer
Date: 11/21/2024
Description:
Main Snakefile for creating the Badapple2 DB. Will generate all necessary
input files (if the don't already exist), initialize the DB, and fill it
with data.

Note: If running from start->finish this workflow can take several hours!
"""

import os
from utils.utils import update_config_paths
from snakemake.utils import min_version

min_version("6.0")


configfile: "config.yaml"


update_config_paths(config)


include: "workflows/Snakefile_download_files"
include: "workflows/Snakefile_assay_list"
include: "workflows/Snakefile_assay_activities"
include: "workflows/Snakefile_assay_descriptors"
include: "workflows/Snakefile_scaffolds"
include: "workflows/Snakefile_targets"


# define job files (all these jobs are updating a Postgres DB)
INITIALIZE_DB_JOB_FILE = "logs/initialize_db/job_done.txt"
LOAD_PUBCHEM_DATA_JOB_FILE = "logs/load_pubchem_data/job_done.txt"
LOAD_DRUGCENTRAL_DATA_JOB_FILE = "logs/load_drugcentral_data/job_done.txt"
CREATE_SCAF2DRUG_JOB_FILE = "logs/create_scaf2drug/job_done.txt"
CREATE_MOL_TABLES_JOB_FILE = "logs/create_mol_tables/job_done.txt"
INDEX_OLD_TABLES_JOB_FILE = "logs/index_old_tables/job_done.txt"
ANNOTATE_COMPOUNDS_JOB_FILE = "logs/annotate_compound_stats/job_done.txt"
ANNOTATE_SCAFFOLDS_JOB_FILE = "logs/annotate_scaffold_stats/job_done.txt"
INDEX_NEW_TABLES_JOB_FILE = "logs/index_new_tables/job_done.txt"
ANNOTATE_IN_DRUG_JOB_FILE = "logs/annotate_in_drug/job_done.txt"
ANNOTATE_SCORES_JOB_FILE = "logs/annotate_scores/job_done.txt"


# for running some scripts in src/sql need path to the code repo
REPO_DIR = os.path.dirname(os.getcwd())


rule all:
    input:
        ANNOTATE_SCORES_JOB_FILE,
        ANNOTATE_IN_DRUG_JOB_FILE,
        INDEX_NEW_TABLES_JOB_FILE,


# 1) initialize DB
rule initialize_db:
    input:
        # start initializing db only after all input TSVs generated
        config["AID2DESCRIPTORS_TSV_PATH"],
        config["ACTIVITY_TSV_PATH"],
        config["BIOACTIVITY_COMPOUND_SET_TSV_PATH"],
        config["SUB2CPD_TSV_PATH"],
        config["COMPOUND_TSV_PATH"],
        config["SCAFFOLD_TSV_PATH"],
        config["SCAF2CPD_TSV_PATH"],
        config["DRUG_CENTRAL_TSV_PATH"],
        config["DRUG_TSV_PATH"],
        config["DRUG_SCAFFOLD_TSV_PATH"],
        config["DRUG_SCAF2CPD_TSV_PATH"],
        config["AID2TARGET_TSV_PATH"],
        config["TARGET_TSV_PATH"],
    output:
        touch(INITIALIZE_DB_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        comment="Badapple2 DB (dev version, PubChem-based)",
    log:
        "logs/initialize_db/all.log",
    benchmark:
        "benchmark/initialize_db/all.tsv"
    shell:
        "bash ../sh_scripts/db/create_db.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' '{params.comment}' "
        "> {log} 2>&1"


# 2a) load in PubChem TSV files (compounds, scaffolds, activity data)
rule load_pubchem_data:
    input:
        INITIALIZE_DB_JOB_FILE,
        aid2descriptors_tsv=config["AID2DESCRIPTORS_TSV_PATH"],
        activity_tsv=config["ACTIVITY_TSV_PATH"],
        bioactivity_cpd_set=config["BIOACTIVITY_COMPOUND_SET_TSV_PATH"],
        sub2cpd_tsv_path=config["SUB2CPD_TSV_PATH"],
        cpd_tsv_path=config["COMPOUND_TSV_PATH"],
        scaf_tsv_path=config["SCAFFOLD_TSV_PATH"],
        scaf2cpd_tsv_path=config["SCAF2CPD_TSV_PATH"],
        aid2target_tsv_path=config["AID2TARGET_TSV_PATH"],
        target_tsv_path=config["TARGET_TSV_PATH"],
    output:
        touch(LOAD_PUBCHEM_DATA_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        repo_dir=REPO_DIR,
    log:
        "logs/load_pubchem_data/all.log",
    benchmark:
        "benchmark/load_pubchem_data/all.tsv"
    shell:
        "bash ../sh_scripts/db/load_pubchem_tsvs.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "'{input.scaf_tsv_path}' "
        "'{input.scaf2cpd_tsv_path}' "
        "'{input.bioactivity_cpd_set}' "
        "'{input.cpd_tsv_path}' "
        "'{input.sub2cpd_tsv_path}' "
        "'{input.activity_tsv}' "
        "'{input.aid2descriptors_tsv}' "
        "'{input.target_tsv_path}' "
        "'{input.aid2target_tsv_path}' "
        "'{params.repo_dir}' "
        "> {log} 2>&1"


# 2b) Load in data from DrugCentral
rule load_drugcentral_data:
    input:
        INITIALIZE_DB_JOB_FILE,
        drugcentral_tsv=config["DRUG_CENTRAL_TSV_PATH"],
        drug_tsv=config["DRUG_TSV_PATH"],  # this is from HierS, ids used to get scaffold->drug relationships
    output:
        touch(LOAD_DRUGCENTRAL_DATA_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
    log:
        "logs/load_drugcentral_data/all.log",
    benchmark:
        "benchmark/load_drugcentral_data/all.tsv"
    shell:
        "bash ../sh_scripts/db/load_drug_table.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "'{input.drugcentral_tsv}' "
        "'{input.drug_tsv}' "
        "> {log} 2>&1"


# 2c) add scaf2drug table
rule create_scaf2drug:
    input:
        LOAD_DRUGCENTRAL_DATA_JOB_FILE,
        LOAD_PUBCHEM_DATA_JOB_FILE,  # have to use scafids from PubChem data
        drug_scaffold_tsv=config["DRUG_SCAFFOLD_TSV_PATH"],
        drug_scaf2cpd_tsv=config["DRUG_SCAF2CPD_TSV_PATH"],
    output:
        touch(CREATE_SCAF2DRUG_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
    log:
        "logs/create_scaf2drug/all.log",
    benchmark:
        "benchmark/create_scaf2drug/all.tsv"
    shell:
        "bash ../sh_scripts/db/load_scaf2drug_table.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "'{input.drug_scaffold_tsv}' "
        "'{input.drug_scaf2cpd_tsv}' "
        "> {log} 2>&1"


# 3) create mol tables for structural searching
rule create_mol_tables:
    input:
        LOAD_PUBCHEM_DATA_JOB_FILE,
    output:
        touch(CREATE_MOL_TABLES_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        repo_dir=REPO_DIR,
    log:
        "logs/create_mol_tables/all.log",
    benchmark:
        "benchmark/create_mol_tables/all.tsv"
    shell:
        "bash ../sh_scripts/db/create_mol_tables2.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' '{params.repo_dir}' "
        "> {log} 2>&1"


# 4) index badapple1 tables for better performance in subsequent steps
rule index_old_tables:
    input:
        CREATE_MOL_TABLES_JOB_FILE,
    output:
        touch(INDEX_OLD_TABLES_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
    log:
        "logs/index_old_tables/all.log",
    benchmark:
        "benchmark/index_old_tables/all.tsv"
    shell:
        "bash ../badapple1_comparison/sh_scripts/db/index_tables.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "> {log} 2>&1"


# 5) annotate compound and scaffold table with activity stats
rule annotate_compound_stats:
    input:
        INDEX_OLD_TABLES_JOB_FILE,
    output:
        touch(ANNOTATE_COMPOUNDS_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        db_user=config["DB_USER"],
        db_password=config["DB_PASSWORD"],
        repo_dir=REPO_DIR,
        assay_id_tag="aid",
    log:
        "logs/annotate_compound_stats/all.log",
    benchmark:
        "benchmark/annotate_compound_stats/all.tsv"
    shell:
        "bash ../sh_scripts/db/annotate_compound_stats.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "'{params.assay_id_tag}' "
        "'{params.db_user}' "
        "'{params.db_password}' "
        "'{params.repo_dir}' "
        "> {log} 2>&1"


rule annotate_scaffold_stats:
    input:
        ANNOTATE_COMPOUNDS_JOB_FILE,
    output:
        touch(ANNOTATE_SCAFFOLDS_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        db_user=config["DB_USER"],
        db_password=config["DB_PASSWORD"],
        repo_dir=REPO_DIR,
        assay_id_tag="aid",
        nass_tested_min=config["NASS_TESTED_MIN_VALUE"],
        aid_file="",  # include all assays
    log:
        "logs/annotate_scaffold_stats/all.log",
    benchmark:
        "benchmark/annotate_scaffold_stats/all.tsv"
    shell:
        "bash ../sh_scripts/db/annotate_scaffold_stats.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "'{params.assay_id_tag}' "
        "'{params.db_user}' "
        "'{params.db_password}' "
        "'{params.repo_dir}' "
        "'{params.aid_file}' "
        "{params.nass_tested_min} "
        "> {log} 2>&1"


# 6) index new tables
rule index_new_tables:
    input:
        ANNOTATE_SCAFFOLDS_JOB_FILE,
    output:
        touch(INDEX_NEW_TABLES_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
    log:
        "logs/index_new_tables/all.log",
    benchmark:
        "benchmark/index_new_tables/all.tsv"
    shell:
        "bash ../sh_scripts/db/index_tables2.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}' "
        "> {log} 2>&1"


# 7) annotate 'in_drug'
rule annotate_in_drug:
    input:
        INDEX_NEW_TABLES_JOB_FILE,
        CREATE_SCAF2DRUG_JOB_FILE,
    output:
        touch(ANNOTATE_IN_DRUG_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
    log:
        "logs/annotate_in_drug/all.log",
    benchmark:
        "benchmark/annotate_in_drug/all.tsv"
    shell:
        "bash ../sh_scripts/db/annotate_in_drug2.sh "
        "'{params.db_name}' '{params.db_host}' '{params.db_schema}'"
        "> {log} 2>&1"


# 8) annotate scaffold scores+ranking
rule annotate_scores:
    input:
        ANNOTATE_SCAFFOLDS_JOB_FILE,
    output:
        touch(ANNOTATE_SCORES_JOB_FILE),
    params:
        db_name=config["DB_NAME"],
        db_host=config["DB_HOST"],
        db_schema=config["DB_SCHEMA"],
        db_user=config["DB_USER"],
        db_password=config["DB_PASSWORD"],
        assay_id_tag="aid",
        repo_dir=REPO_DIR,
        data_dir=config["BASE_DATA_DIR"],
        db_comment="Badapple2 DB (PubChem HTS assays w/ 20k+ compounds)",
        ba_classic_med_ncpd_tested=config["BADAPPLE_CLASSIC_MEDIAN_NCPD_TESTED"],
        ba_classic_med_nsub_tested=config["BADAPPLE_CLASSIC_MEDIAN_NSUB_TESTED"],
        ba_classic_med_nsass_tested=config["BADAPPLE_CLASSIC_MEDIAN_NASS_TESTED"],
        ba_classic_med_nsam_tested=config["BADAPPLE_CLASSIC_MEDIAN_NSAM_TESTED"],
    log:
        "logs/annotate_scores/all.log",
    benchmark:
        "benchmark/annotate_scores/all.tsv"
    shell:
        "bash ../sh_scripts/db/annotate_scores2.sh "
        "'{params.db_name}' "
        "'{params.db_host}' "
        "'{params.db_schema}' "
        "'{params.assay_id_tag}' "
        "'{params.db_user}' "
        "'{params.db_password}' "
        "'{params.repo_dir}' "
        "'{params.data_dir}' "
        "'{params.db_comment}' "
        "{params.ba_classic_med_ncpd_tested} "
        "{params.ba_classic_med_nsub_tested} "
        "{params.ba_classic_med_nsass_tested} "
        "{params.ba_classic_med_nsam_tested} "
        "> {log} 2>&1"
