"""
@author Jack Ringer
Date: 6/5/2024
Description:
This tsv_file is for comparing the scaffolds generated by RDKit to 
scaffolds from the original badapple database.
Used to help verify the correctness of RDKit code for badapple 2.0.
"""

import argparse

import pandas as pd
from rdkit import Chem
from tqdm import tqdm

RD_MOL_SMILES_COL = "smiles"
RD_MOL_ID_COL = "mol_id"
BA_MOL_SMILES_COL = "cansmi"
BA_MOL_ID_COL = "cid"

RD_SCAF_SMILES_COL = "smiles"
RD_SCAF_ID_COL = "scaffold_id"
BA_SCAF_SMILES_COL = "scafsmi"
BA_SCAF_ID_COL = "id"

RD_MOL2SCAF_MOL_ID_COL = RD_MOL_ID_COL
RD_MOL2SCAF_SCAF_ID_COL = RD_SCAF_ID_COL
BA_MOL2SCAF_MOL_ID_COL = BA_MOL_ID_COL
BA_MOL2SCAF_SCAF_ID_COL = "scafid"


def parse_args(parser: argparse.ArgumentParser):
    parser.add_argument("--rdkit_mol_tsv_file", type=str, required=True)
    parser.add_argument("--badapple_mol_tsv_file", type=str, required=True)
    parser.add_argument("--rdkit_scaf_tsv_file", type=str, required=True)
    parser.add_argument("--badapple_scaf_tsv_file", type=str, required=True)
    parser.add_argument("--rdkit_mol2scaf_tsv_file", type=str, required=True)
    parser.add_argument("--badapple_mol2scaf_tsv_file", type=str, required=True)
    return parser.parse_args()


def canon_smiles(smiles: str):
    return Chem.MolToSmiles(Chem.MolFromSmiles(smiles))


def print_duplicates(series: pd.Series, series_set: set):
    if len(series) != len(series_set):
        vc = series.value_counts()
        print(vc[vc > 1])


def compare_smiles(
    rd_df: pd.DataFrame,
    ba_df: pd.DataFrame,
    rd_col: str,
    ba_col: str,
    id_col: str,
    print_details: bool = True,
):
    # assumes both smiles cols have been canonicalized
    rd_smiles = rd_df[rd_col]
    ba_smiles = ba_df[ba_col]
    rd_smiles_set = set(rd_smiles)  # from rdkit scaf net
    ba_smiles_set = set(ba_smiles)  # from badapple db
    print(f"len(rd): {len(rd_smiles_set)}")
    print(f"len(rd[id]): {len(set(rd_df[id_col]))}")
    print(f"len(ba): {len(ba_smiles_set)}")
    print("-" * 80)
    print("RDKit duplicates:")
    print_duplicates(rd_smiles, rd_smiles_set)
    print("-" * 80)
    print("Badapple duplicates:")
    print_duplicates(ba_smiles, ba_smiles_set)
    print("-" * 80)
    if print_details:
        rd_minus_ba = rd_smiles_set - ba_smiles_set
        ba_minus_rd = ba_smiles_set - rd_smiles_set
        print("rd_minus_ba length:", len(rd_minus_ba))
        print("rd_minus_ba SMILES:")
        print_smis(rd_minus_ba)
        print("-" * 80)
        print("ba_minus_rd length:", len(ba_minus_rd))
        print("ba_minus_rd SMILES:")
        print_smis(ba_minus_rd)


def print_smis(smiles_list: list[str]):
    for smi in smiles_list:
        print(smi)


def get_str_rep(smiles_list: list[str]):
    s = ""
    for smi in smiles_list:
        s += smi + "\n"
    return s


def get_scaffolds(
    mol_smiles: str,
    mol_df,
    scaf_df,
    mol2scaf_df,
    mol_df_smi_col,
    mol_df_id_col,
    scaf_df_smi_col,
    scaf_df_id_col,
    mol2scaf_mol_id_col,
    mol2scaf_scaf_id_col,
):

    mol_df_idx = mol_df[mol_df_smi_col].searchsorted(mol_smiles, side="left")
    mol_id = mol_df[mol_df_id_col].iloc[mol_df_idx]

    mol2scaf_idx1 = mol2scaf_df[mol2scaf_mol_id_col].searchsorted(mol_id, side="left")
    mol2scaf_idx2 = mol2scaf_idx1
    while (
        mol2scaf_idx2 < len(mol2scaf_df)
        and mol2scaf_df[mol2scaf_mol_id_col].iloc[mol2scaf_idx2] == mol_id
    ):
        mol2scaf_idx2 += 1
    scaf_ids = mol2scaf_df[mol2scaf_scaf_id_col].iloc[mol2scaf_idx1:mol2scaf_idx2]
    scaf_df_idx = scaf_df[scaf_df_id_col].searchsorted(scaf_ids, side="left")
    scaffolds = scaf_df[scaf_df_smi_col].iloc[scaf_df_idx]
    return set(scaffolds)


# compare the scaffolds between rdkit and badapple for mol with given canonical smiles
def compare_scaffolds(
    mol_smiles: str,
    rd_mol_df,
    ba_mol_df,
    rd_scaf_df,
    ba_scaf_df,
    rd_mol2scaf_df,
    ba_mol2scaf_df,
):
    rd_scafs = get_scaffolds(
        mol_smiles,
        rd_mol_df,
        rd_scaf_df,
        rd_mol2scaf_df,
        RD_MOL_SMILES_COL,
        RD_MOL_ID_COL,
        RD_SCAF_SMILES_COL,
        RD_SCAF_ID_COL,
        RD_MOL2SCAF_MOL_ID_COL,
        RD_MOL2SCAF_SCAF_ID_COL,
    )
    ba_scafs = get_scaffolds(
        mol_smiles,
        ba_mol_df,
        ba_scaf_df,
        ba_mol2scaf_df,
        BA_MOL_SMILES_COL,
        BA_MOL_ID_COL,
        BA_SCAF_SMILES_COL,
        BA_SCAF_ID_COL,
        BA_MOL2SCAF_MOL_ID_COL,
        BA_MOL2SCAF_SCAF_ID_COL,
    )
    # appending to str so as not to interrupt tqdm progress bar
    s = ""
    rd_minus_ba_cnt = 0
    ba_minus_rd_cnt = 0
    if ba_scafs != rd_scafs:
        s += f"Difference detected for mol with SMILES: {mol_smiles}\n"
        s += "rd_minus_ba:\n"
        rd_minus_ba = rd_scafs - ba_scafs
        rd_minus_ba_cnt = len(rd_minus_ba)
        s += get_str_rep(rd_minus_ba)
        ba_minus_rd = ba_scafs - rd_scafs
        ba_minus_rd_cnt = len(ba_minus_rd)
        s += "ba_minus_rd:\n"
        s += get_str_rep(ba_minus_rd)
        s += "-" * 80 + "\n"
        return False, s, rd_minus_ba_cnt, ba_minus_rd_cnt
    return True, s, rd_minus_ba_cnt, ba_minus_rd_cnt


def mol2scaf_check(
    rd_mol_df, ba_mol_df, rd_scaf_df, ba_scaf_df, rd_mol2scaf_df, ba_mol2scaf_df
):
    cnt = 0
    rd_minus_ba_ovr_cnt = 0
    ba_minus_rd_ovr_cnt = 0
    diff_str = ""
    for mol_smi in tqdm(rd_mol_df[RD_MOL_SMILES_COL]):
        were_same, s, rd_minus_ba_cnt, ba_minus_rd_cnt = compare_scaffolds(
            mol_smi,
            rd_mol_df,
            ba_mol_df,
            rd_scaf_df,
            ba_scaf_df,
            rd_mol2scaf_df,
            ba_mol2scaf_df,
        )
        if not (were_same):
            cnt += 1
            diff_str += s
            rd_minus_ba_ovr_cnt += rd_minus_ba_cnt
            ba_minus_rd_ovr_cnt += ba_minus_rd_cnt
    print(diff_str)
    print(f"Total of {cnt} compounds had different scaffolds")
    print("(RD - BA) Avg:", rd_minus_ba_ovr_cnt / cnt)
    print("(BA - RD) Avg:", ba_minus_rd_cnt / cnt)


# TODO: use logging or another method for saving output (don't just use stdout)
def main():
    parser = argparse.ArgumentParser(description="Scaffolds compare", epilog="")
    args = parse_args(parser)
    # load dataframes mapping id to mol smiles
    print("Loading/processing data...")
    rd_mol_df = pd.read_csv(args.rdkit_mol_tsv_file, sep="\t")
    rd_mol_df.sort_values(by=RD_MOL_SMILES_COL, inplace=True)
    ba_mol_df = pd.read_csv(args.badapple_mol_tsv_file, sep="\t")
    ba_mol_df[BA_MOL_SMILES_COL] = ba_mol_df[BA_MOL_SMILES_COL].map(canon_smiles)
    ba_mol_df.sort_values(by=BA_MOL_SMILES_COL, inplace=True)

    # dataframes mapping id to scaf smiles
    rd_scaf_df = pd.read_csv(args.rdkit_scaf_tsv_file, sep="\t")
    rd_scaf_df.sort_values(by=RD_SCAF_ID_COL, inplace=True)
    ba_scaf_df = pd.read_csv(args.badapple_scaf_tsv_file, sep="\t")
    ba_scaf_df[BA_SCAF_SMILES_COL] = ba_scaf_df[BA_SCAF_SMILES_COL].map(canon_smiles)
    ba_scaf_df.sort_values(by=BA_SCAF_ID_COL, inplace=True)

    # dataframes mapping mol ids to scaf ids
    rd_mol2scaf_df = pd.read_csv(args.rdkit_mol2scaf_tsv_file, sep="\t")
    rd_mol2scaf_df.sort_values(by=RD_MOL2SCAF_MOL_ID_COL, inplace=True)
    ba_mol2scaf_df = pd.read_csv(args.badapple_mol2scaf_tsv_file, sep="\t")
    ba_mol2scaf_df.sort_values(by=BA_MOL2SCAF_MOL_ID_COL, inplace=True)
    print("Comparing Mols:")
    compare_smiles(
        rd_mol_df,
        ba_mol_df,
        rd_col="smiles",
        ba_col=BA_MOL_SMILES_COL,
        id_col=RD_MOL_ID_COL,
        print_details=True,
    )
    print("*" * 80)
    print("Comparing Scaffolds:")
    compare_smiles(
        rd_scaf_df,
        ba_scaf_df,
        rd_col=RD_SCAF_SMILES_COL,
        ba_col=BA_SCAF_SMILES_COL,
        id_col=RD_SCAF_ID_COL,
        print_details=False,
    )
    """
    print("*" * 80)
    print("Comparing Mol2Scaf:")
    mol2scaf_check(
        rd_mol_df, ba_mol_df, rd_scaf_df, ba_scaf_df, rd_mol2scaf_df, ba_mol2scaf_df
    )
    """


if __name__ == "__main__":
    main()
